---
title: "ETC5521: Diving Deeply into Data Exploration"
title-slide-attributes: 
  data-background-image: "../images/bg.png"
  data-background-size: 100%
subtitle: "Going beyond two variables, exploring high dimensions"
author: "Professor Di Cook"
email: "ETC5521.Clayton-x@monash.edu"
length: "100 minutes"
pdflink: "lecture.pdf"
institute: "Department of Econometrics and Business Statistics"
footer: "ETC5521 Lecture 8 | [ddde.numbat.space](ddde.numbat.space)"
format:
  revealjs:
    multiplex: false
    slide-number: c/t
    slide-tone: false
    theme: "../assets/monash.scss"
    width: 1600
    height: 900
    margin: 0.05
    embed-resources: true
---

```{r, include = FALSE, echo=FALSE}
source("../setup.R")
```

## Outline

- What is high-dimensional data? (If all variables are quantitative)
- Exploring relationships between more than two variables
    - Tours - scatterplots of combinations of variables
    - Matrix of plots
    - Parallel coordinates
- What can be hidden
- Automating the search for pairwise relationships using scagnostics
- Linking elements of multiple plots
- Exploring multiple categorical variables

## Flatland

<a href="https://youtu.be/C8oiwnNlyE4"> Click here to watch video </a>


[Trailer for "FLATLAND 2: SPHERELAND". Original book, and movie information at [wikipedia](https://en.wikipedia.org/wiki/Flatland)]{.smallest}

## High-dimensional shapes: shadows and slices

```{r}
#| eval: false
#| echo: false
set.seed(1156)
hd1 <- as_tibble(geozoo::sphere.solid.random()$points)
hd2 <- as_tibble(geozoo::sphere.hollow()$points)
hd3 <- as_tibble(geozoo::cube.solid.random()$points)
hd4 <- as_tibble(geozoo::cube.face()$points)
render_gif(hd1, grand_tour(), display_xy(axes="off"), 
           gif_file = "images/sphere_solid.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(hd2, grand_tour(), display_xy(axes="off"), 
           gif_file = "images/sphere_hollow.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(hd3, grand_tour(), display_xy(axes="off"), 
           gif_file = "images/cube_solid.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(hd4, grand_tour(), display_xy(axes="off"), 
           gif_file = "images/cube_hollow.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(hd1, grand_tour(), display_slice(axes="off"), 
           gif_file = "images/sphere_solid_slice.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(hd2, grand_tour(), display_slice(axes="off"), 
           gif_file = "images/sphere_hollow_slice.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(hd3, grand_tour(), display_slice(axes="off"), 
           gif_file = "images/cube_solid_slice.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(hd4, grand_tour(), display_slice(axes="off"), 
           gif_file = "images/cube_hollow_slice.gif",
           frames = 50,
           start = basis_random(3,2)
          )
```
<table>
<tr>
<td> <img src="../images/sphere_solid.gif"> </td>
<td> <img src="../images/sphere_hollow.gif"> </td>
<td> <img src="../images/cube_solid.gif"> </td>
<td> <img src="../images/cube_hollow.gif"> </td>
</tr>
</table>

::: {.fragment}
<table>
<tr>
<td> <img src="../images/sphere_solid_slice.gif"> </td>
<td> <img src="../images/sphere_hollow_slice.gif"> </td>
<td> <img src="../images/cube_solid_slice.gif"> </td>
<td> <img src="../images/cube_hollow_slice.gif"> </td>
</tr>
</table>
:::

## Low-dimensional shapes in high-dimensions

```{r}
#| eval: false
#| echo: false
set.seed(116)
ld1 <- tibble(V1=runif(365), V2=runif(365, -0.01, 0.01),
              V3=runif(365, -0.01, 0.01))
ld2 <- tibble(V1=runif(365), V2=runif(365),
              V3=runif(365, -0.01, 0.01))
ld3 <- tibble(V1=runif(365), V2=V1^2,
              V3=runif(365, -0.01, 0.01))
ld4 <- tibble(V1=runif(365), V2=V1^2,
              V3=runif(365))
render_gif(ld1, grand_tour(), display_xy(axes="off"), 
           gif_file = "images/1d_in_3d.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(ld2, grand_tour(), display_xy(axes="off"), 
           gif_file = "images/2d_in_3d.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(ld3, grand_tour(), display_xy(axes="off"), 
           gif_file = "images/nl_1d_in_3d.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(ld4, grand_tour(), display_xy(axes="off"), 
           gif_file = "images/nl_2d_in_3d.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(ld1, grand_tour(), display_slice(axes="off"), 
           gif_file = "images/1d_in_3d_slice.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(ld2, grand_tour(), display_slice(axes="off"), 
           gif_file = "images/2d_in_3d_slice.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(ld3, grand_tour(), display_slice(axes="off"), 
           gif_file = "images/nl_1d_in_3d_slice.gif",
           frames = 50,
           start = basis_random(3,2)
          )
render_gif(ld4, grand_tour(), display_slice(axes="off"), 
           gif_file = "images/nl_2d_in_3d_slice.gif",
           frames = 50,
           start = basis_random(3,2)
          )
```
<table>
<tr>
<td> <img src="../images/1d_in_3d.gif"> </td>
<td> <img src="../images/2d_in_3d.gif"> </td>
<td> <img src="../images/nl_1d_in_3d.gif"> </td>
<td> <img src="../images/nl_2d_in_3d.gif"> </td>
</tr>
</table>

<table>
<tr>
<td> <img src="../images/1d_in_3d_slice.gif"> </td>
<td> <img src="../images/2d_in_3d_slice.gif"> </td>
<td> <img src="../images/nl_1d_in_3d_slice.gif"> </td>
<td> <img src="../images/nl_2d_in_3d_slice.gif"> </td>
</tr>
</table>


## What is high-dimensions?

<center>
<img src="https://dicook.github.io/mulgar_book/1-intro_files/figure-html/fig-dimension-cubes-1.png" width="90%">
</center>

When all variables are quantitative, an extra variable adds an extra orthogonal axis. It has a name, [Euclidean space]{.monash-blue2} which dates back to the [ancient Greeks](https://en.wikipedia.org/wiki/Euclidean_geometry).

## Features to find

:::: {.columns}
::: {.column width=80%}

```{r}
#| label: feature-table2
#| echo: false
tribble(
  ~Feature, ~Example, ~Description,
  "linear form", "", "The shape is linear",
  "nonlinear form", "", "The shape is more of a curve",
  "outliers", "", "There are one or more points that do not fit the pattern on the others",
  "clusters", "", "The observations group into multiple clumps",
  "gaps", "", "There is a gap, or gaps, but its not clumped",
  "barrier", "", "There is combination of the variables which appears impossible",
  "l-shape", "", "When one variable changes the other is approximately constant",
  "discreteness", "", "Relationship between two variables is different from the overall, and observations are in a striped pattern",
) |>
  knitr::kable(escape = FALSE) |>
  kableExtra::kable_classic() |>
  kableExtra::kable_styling(font_size=24, 
                            full_width=FALSE) |>
  kableExtra::column_spec(2, 
    image=spec_image(
      c("../images/scatterplots2-1.png",
        "../images/scatterplots2-2.png",
        "../images/scatterplots2-4.png",
        "../images/scatterplots2-5.png",
        "../images/scatterplots2-6.png",
        "../images/scatterplots3-1.png",
        "../images/scatterplots3-2.png",
        "../images/scatterplots3-3.png"), width=120, height=120))
```
:::
::: {.column width=20%}
Any of the features from 2D are patterns to find in higher dimensions.
:::
::::

## A movie of linear combinations: tour {.transition-slide .center style="text-align: center;"}

## Grand tour

:::: {.columns}
::: {.column}

```{r}
#| eval: false
#| code-fold: true
library(palmerpenguins)
f_std <- function(x) (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)
p_std <- penguins |>
  select(bill_length_mm:body_mass_g, species) |>
  rename(bl = bill_length_mm,
         bd = bill_depth_mm,
         fl = flipper_length_mm,
         bm = body_mass_g) |>
  na.omit() |>
  mutate(bl = f_std(bl),
         bd = f_std(bd),
         fl = f_std(fl),
         bm = f_std(bm))
animate_xy(p_std[,1:4], axes="off")
render_gif(p_std[,1:4], grand_tour(), display_xy(axes="off"),
           gif_file = "images/penguins_grand.gif",
           frames = 50,
           start = basis_random(4,2))
```

![](../images/penguins_grand.gif)

How many clusters?

:::
::: {.column}

::: {.fragment}

```{r}
#| eval: false
#| code-fold: true
animate_xy(p_std[,1:4], axes="off", col=p_std$species)
render_gif(p_std[,1:4], grand_tour(),
           display_xy(col=p_std$species, axes="off"),
           gif_file = "images/penguins_grand_sp.gif",
           frames = 50,
           start = basis_random(4,2))
```

![](../images/penguins_grand_sp.gif)

The clusters correspond the three species. 
:::

:::
::::

## What does linear combination of variables mean?

```{r eval=FALSE, echo=FALSE, warning=FALSE}
#| eval: false
#| echo: false
#| warning: false
set.seed(537)
bases <- save_history(p_std[,1:4], grand_tour(2),
    start=basis_random(4,2),
    max = 3)
# Re-set start bc seems to go awry
tour_path <- interpolate(bases, 0.1)
d <- dim(tour_path)
mydat <- NULL; myaxes <- NULL
for (i in 1:d[3]) {
  fp <- as.matrix(p_std[,1:4]) %*% matrix(tour_path[,,i], ncol=2)
  fp <- tourr::center(fp)
  colnames(fp) <- c("d1", "d2")
  mydat <- rbind(mydat, cbind(fp, rep(i+10, 2*nrow(fp))))
  fa <- cbind(matrix(0, 4, 2), matrix(tour_path[,,i], ncol=2))
  colnames(fa) <- c("origin1", "origin2", "d1", "d2") 
  myaxes <- rbind(myaxes, cbind(fa, rep(i+10, 2*nrow(fa))))
}
colnames(mydat)[3] <- "indx"
colnames(myaxes)[5] <- "indx"
df <- as_tibble(mydat) |>
  mutate(species = rep(p_std$species, d[3]))
dfaxes <- as_tibble(myaxes) |>
  mutate(labels=rep(colnames(p_std[,1:4]), d[3]))
dfaxes_mat <- dfaxes |>
  mutate(xloc = rep(max(df$d1)+1, d[3]*4), 
         yloc=rep(seq(2, -2, -1.3), d[3]), 
         coef=paste(round(dfaxes$d1, 2), ", ", 
                    round(dfaxes$d2, 2)))
p <- ggplot() +
       geom_segment(data=dfaxes, aes(x=d1*2-3, 
                                     xend=origin1-3, 
                                     y=d2*2, 
                                     yend=origin2, 
                                     frame = indx),
                    colour="grey70") +
       geom_text(data=dfaxes, aes(x=d1*2-3, 
                                  y=d2*2,
                                  label=labels, 
                                  frame = indx), 
                 colour="grey70") +
       geom_point(data = df, aes(x = d1, 
                                 y = d2, 
                                 colour=species, 
                                 frame = indx), size=1) +
       geom_text(data=dfaxes_mat, aes(x=xloc, y=yloc, 
                                  label=coef, frame = indx)) + 
       scale_colour_discrete_divergingx(palette = "Zissou 1") +
       theme_void() +
       coord_fixed() +
  theme(legend.position="none")
pg <- ggplotly(p, width=600, height=550) %>%
  animation_opts(200, redraw = FALSE, 
                 easing = "linear", transition=0)
save_html(pg, file="images/penguins4d.html")
```

<a href="https://ddde.numbat.space/images/penguins4d.html"> Click to see demo </a>

## Guided tour

## Manual tour

## Slice tour

## Scale your data!


## Static plots of multivariate data {.transition-slide .center style="text-align: center;"}

## Simpler: scatterplot matrix

## Parallel coordinate plot

## What you might miss without a tour {.transition-slide .center style="text-align: center;"}


## Hidden structure

## Famous example: RANDU

## Automating the search with scagnostics {.transition-slide .center style="text-align: center;"}

## Linking elements of multiple plots {.transition-slide .center style="text-align: center;"}

## Exploring multiple categorical variables {.transition-slide .center style="text-align: center;"}

## Resources
