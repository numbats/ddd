---
title: "ETC5521 Diving Deeper into Data Exploration: Assignment 1"
subtitle: "As per Monash's integrity rules, these solutions are not to be shared beyond this class."
author: "Prof. Di Cook"
date: "Jul 22, 2024"
quarto-required: ">=1.3.0"
format:
    unilur-html: 
        output-file: assign01.html
        css: "assignment.css"
        embed-resources: true
    unilur-html+solution:
        output-file: assign01sol.html
        css: "assignment.css"
        embed-resources: true
        show-solution: true
---

```{r}
#| echo: false
# Set up chunk for all slides
knitr::opts_chunk$set(
  fig.width = 6,
  fig.height = 4,
  fig.align = "center",
  out.width = "100%",
  code.line.numbers = FALSE,
  fig.retina = 4,
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  cache = FALSE,
  dev.args = list(pointsize = 11)
)
```

```{r}
#| echo: false
# Load libraries
library(tidyverse)
library(conflicted)

conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::slice)

# Plot options and themes
options(
  digits = 2,
  width = 60,
  ggplot2.continuous.colour = "viridis",
  ggplot2.continuous.fill = "viridis",
  ggplot2.discrete.colour = c("#D55E00", "#0072B2", "#009E73", "#CC79A7", "#E69F00", "#56B4E9", "#F0E442"),
  ggplot2.discrete.fill = c("#D55E00", "#0072B2", "#009E73", "#CC79A7", "#E69F00", "#56B4E9", "#F0E442")
)

theme_set(theme_bw(base_size = 14) +
   theme(
     aspect.ratio = 1,
     plot.background = element_rect(fill = 'transparent', colour = NA),
     plot.title.position = "plot",
     plot.title = element_text(size = 24),
     panel.background = element_rect(fill = 'transparent', colour = NA),
     legend.background = element_rect(fill = 'transparent', colour = NA),
     legend.key = element_rect(fill = 'transparent', colour = NA)
   )
)
```

## üéØ Goal

The assignment is designed to assess your knowledge of data wrangling and GitHub is at a level to be able to successfully follow the content of this class.  The assignment represents 15\% of your final grade for ETC5521. This is an **individual** assignment.

## üìå Guidelines 

1. Accept the GitHub Classroom Assignment provided in Moodle using a GitHub Classroom compatible web browser. This should generate a **private** GitHub repository that can be found at https://github.com/etc5521-2024. Your GitHub assignment 1 repo should contain the file `assign01.html`, `README.md`, `assign01-submission.qmd`, `assignment.css`, `etc5521-assignment1.Rproj` and `.gitignore`.

2. Answer each question in the `assign01-submission.qmd` in the repo.

3. For the final submission knit `assign01-submission.qmd` which will contain your answers. Make sure to **provide the link to the script of any Generative AI conversation** you employed in arriving at your solution. *Note that marks are allocated for overall grammar and structure of your final report.*

4. Leave all of your files in your GitHub repo for marking. We will check your git commit history. You should have contributions to the repo with consistent commits over time. (*Note: nothing needs to be submitted to Moodle.*)

5. You are expected to **develop your solutions by yourself**, without discussing any details with other class members or other friends or contacts. You can ask for clarifications from the teaching team and we encourage you to attend consultations to get assistance as needed.  As a Monash student you are expected to adhere to **[Monash's academic integrity policy](https://publicpolicydms.monash.edu/Monash/documents/1935748).** and the details on use of Generative AI as detailed on this unit's Moodle assessment overview. 

Deadlines: 

```{r create-deadline-table, echo = FALSE}
due_date <- c("11:45pm Mon Jul 29", "11:45pm Mon Aug 5")

turn_in <- c("Assignment 1 Repo on GitHub has been created", "Final solutions available on repo")

points <- c(3, 12)

library(tibble)
df_project <- tibble(`Due date` = due_date,
                     `Turn in` = turn_in,
                     `Points` = points)

```

```{r display-table, echo = FALSE}
library(kableExtra)
kable(df_project, table.attr = 'data-quarto-disable-processing="true"') %>%
  column_spec(1, width = "3cm", bold = T, border_right = T) %>%
  column_spec(2, width = "5cm", border_right = T) %>%
  column_spec(3, width = "0.3cm") %>%
  kable_styling(full_width = FALSE) 
```

## üõ†Ô∏è Exercises

The data to use is available from [Tidy Tuesday 28 May 2024 page](https://github.com/rfordatascience/tidytuesday/blob/master/data/2024/2024-05-28/readme.md). Download the data from here, ideally using the `tidytuesdayR` package. You should only download the data from the Tidy Tuesday once, and save a copy locally on your computer. 

In addition the `gardenR` package, available from `remotes::install_github("llendway/gardenR")` has extra details about the garden. 

::: unilur-solution

This is the code to download the data, and load relevant libraries. 

```{r}
#| eval: false
# remotes::install_github("llendway/gardenR")
# install.packages("tidytuesdayR")
tuesdata <- tidytuesdayR::tt_load('2024-05-28')
save(tuesdata, file="tuesdata.rda")
```

```{r}
library(gardenR)
library(tidyverse)
library(ggbeeswarm)

load("tuesdata.rda")
harvest_2020 <- tuesdata$harvest_2020
harvest_2021 <- tuesdata$harvest_2021
planting_2020 <- tuesdata$planting_2020
planting_2021 <- tuesdata$planting_2021
spending_2020 <- tuesdata$spending_2020
spending_2021 <- tuesdata$spending_2021

data("garden_coords")
```
:::

## Question 1 

a. How many types of vegetables were grown in each year?
b. How many vegetables were grown in 2020 that were not grown in 2021? 
c. What are some of the data recording errors that can be seen by comparing vegetables grown in each year?

::: unilur-solution

a. There were `r harvest_2020 |> count(vegetable, sort=TRUE) |> nrow()` vegetables grown in 2020, and `r harvest_2021 |> count(vegetable, sort=TRUE) |> nrow()` grown in 2021.

b. To work out which differ between years, use the `anti_join()` function. Because there are multiple plots of vegetables use `distinct()` to remove duplicates, and then arrange alpabetically for ease of comperison. 

```{r}
#| label: mismatches
in20butnot21 <- anti_join(select(harvest_2020, vegetable), select(harvest_2021, vegetable), by="vegetable") |> 
  distinct() |> 
  arrange(vegetable)
in21butnot20 <- anti_join(select(harvest_2021, vegetable), select(harvest_2020, vegetable), by="vegetable") |> 
  distinct() |> 
  arrange(vegetable)
in20butnot21$vegetable
in21butnot20$vegetable
```

c. 

- `swiss chard` was grown in each year but capital "S" was used in 2020. 
- `apples` were grown in each year, but singular name was used in 2021.
- similarly for `pumpkins` but in reverse, singular used in 2020!

```{r}
harvest_2020 <- harvest_2020 |>
  mutate(vegetable = tolower(vegetable),
         variety = tolower(variety)) |>
  mutate(vegetable = case_match(
    vegetable,
    "apple" ~ "apples",
    .default = vegetable)
  )
harvest_2021 <- harvest_2021 |>
  mutate(vegetable = case_match(
    vegetable,
    "pumpkin" ~ "pumpkins",
    .default = vegetable)
  )
```

So final answer for (b) is here are the vegetables not grown both years:

```{r}
#| label: mismatches
#| echo: false
```


:::

## Question 2

a. Join the harvest data for the two years, after adding a new variable each, called `year`. Show your code.
b. For the `tomatoes` compare the weight of the harvest in both years.
c. Explain what might be a problem when comparing the tomato yield from these two years.

::: unilur-solution

a.

```{r}
harvest_2020 <- harvest_2020 |>
  mutate(year = "2020")
harvest_2021 <- harvest_2021 |>
  mutate(year = "2021")
harvest <- bind_rows(harvest_2020, harvest_2021)
```

b. You can compare by adding the weights up or by making a plot of the two years and the multiple yields from different garden plots.

```{r}
harvest |> 
  filter(vegetable == "tomatoes") |>
  group_by(year) |> 
  summarise(weight = sum(weight),
            nplots = n())
harvest |> 
  filter(vegetable == "tomatoes") |>
  ggplot(aes(x=year, y=weight)) +
    geom_quasirandom() +
    xlab("")
```

c. From the summary, we can see that there are a different number of plants grown in each year. While the yield was slightly higher in 2020, it appears that there were also more plants grown in 2020.

One could average the weight per plant, and recompute means.

```{r}
harvest |> 
  filter(vegetable == "tomatoes") |>
  group_by(year) |> 
  summarise(weight = mean(weight))
```

We then see that the yield is slightly higher in 2021. Note that from the plot, we can also see the distribution of weights is skewed, so using the median would be better than the mean.

However, another problem in making the comparison is that the type of tomatoes grown each year might be different, and then the yield difference may be due to type of tomatoes grown.

```{r}
harvest |> 
  filter(vegetable == "tomatoes") |>
  group_by(year) |> 
  count(variety) |>
  distinct() |>
  arrange(variety) |>
  print(n=26)
```

We can see a problem with data recording again, that upper case was used in 2020 to label the variety but all were lower case in 2021.
:::

## Question 3

The planting data has the label of the garden plot where each vegetable is grown. The `gardenR` package has the spatial coordinates of these spots in the garden. 

- Join the `planting_2020` and `planting_2021` data, after adding a variable labelling the year. And then joining with the `garden_coords` data, so that the locations of each plot are recorded.
- Plot garden layout, with locations of tomatoes coloured, facetted by year.

::: unilur-solution

```{r}
planting_2020 <- planting_2020 |>
  mutate(year = "2020") |>
  select(plot, vegetable, year)
planting_2021 <- planting_2021 |>
  mutate(year = "2021") |>
  select(plot, vegetable, year)
planting <- bind_rows(planting_2020,
                      planting_2021)
gcoords_center <- garden_coords |>
  group_by(plot) |>
  summarise(x = mean(x),
            y = mean(y))
planting_coords <- planting |>
  filter(vegetable == "tomatoes") |>
  left_join(gcoords_center, by = "plot")

ggplot(garden_coords, aes(x=x, y=y, group=plot)) +   geom_polygon() +
  geom_jitter(data=planting_coords, 
    aes(x=x, y=y), colour="red", 
    alpha=0.8, width=0.8, height=0.8) +
  facet_wrap(~year, ncol=2) 
```

Interestingly, the garden plots are not all rectangular. But the spots where tomatoes are grown are, so using the mean of the vertices gives a reasonable spot to place a point indicating that they are in this box.

Also note the missing data warning! This comes because one location is labelled as `front` which does not have coordinates.

Two of the boxes are the same in both years. 
:::


## Generative AI analysis

In this part, we would like you to actively discuss how generative AI helped with your answers to the assignment questions, and where or how it was mistaken or misleading. 

You need to provide a link that makes the full script of your conversation with any generative AI tool accessible to the teaching staff. You should not use a paid service, as the freely available systems will sufficiently helpful.

::: unilur-solution
The link to my use of ChatGPT for help on this project is https://chatgpt.com/share/876df8e2-70df-41b2-b567-63e9c029788e. 
:::


## Marks


```{r create-marks-table, echo = FALSE}
part <- c("GitHub Repo", "Q1-Q3 each worth", "Generative AI Analysis", "Formatting, Spelling & Grammar")

points <- c(3, 4, -3, -3)

library(tibble)
df_marks <- tibble(`Part` = part,
                     `Points` = points)

```

```{r display-marks, echo = FALSE}
library(kableExtra)
kable(df_marks, table.attr = 'data-quarto-disable-processing="true"') %>%
  kable_styling(full_width = FALSE) %>%
  column_spec(1, width = "5cm", border_right = T) %>%
  column_spec(2, width = "0.3cm") 

```
